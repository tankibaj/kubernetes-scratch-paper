alertmanager:
  enabled: false
  

## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
grafana:
  enabled: true
  
  ingress:
    enabled: true
    hosts:
      - central-grafana.local.naim.run
    path: /
    pathType: Prefix
    
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      multicluster:
        global:
          enabled: true
    datasources:
      enabled: true
      defaultDatasourceEnabled: false
  
  ## Configure additional grafana datasources (passed through tpl)
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  additionalDataSources:
    - name: Cortex
      access: proxy
      editable: false
      type: prometheus
      uid: cortex
      url: http://cortex-query-frontend.cortex.svc.cluster.local:8080/api/prom
      version: 1
      
      
## Component scraping the kube api server
kubeApiServer:
  enabled: false
  
  
## Component scraping the kubelet and kubelet-hosted cAdvisor
kubelet:
  enabled: true
  

# Disable Controller metrics
kubeControllerManager:
  enabled: false


## Component scraping coreDns. Use either this or kubeDns
coreDns:
  enabled: false
  

## Component scraping kubeDns. Use either this or coreDns
kubeDns:
  enabled: false


## Component scraping etcd
kubeEtcd:
  enabled: false
  

## Component scraping kube scheduler
kubeScheduler:
  enabled: false
  

## Component scraping kube proxy
kubeProxy:
  enabled: false
  

## Component scraping kube state metrics
kubeStateMetrics:
  enabled: true
  
  
## Deploy node exporter as a daemonset to all nodes
nodeExporter:
  enabled: true


## Manages Prometheus and Alertmanager components
prometheusOperator:
  enabled: true
  ## If true, the operator will create and maintain a service for scraping kubelets
  kubeletService:
    enabled: true
  
  
  
prometheus:
  enabled: true
  # One ServiceMonitor CRD for scraping data from all Cortex components
  #  additionalServiceMonitors:
  #    - name: cortex-health-monitor
  #      endpoints:
  #        - path: /metrics
  #          port: http-metrics
  #      namespaceSelector:
  #        matchNames:
  #          - cortex
  #      selector:
  #        matchLabels:
  #          app.kubernetes.io/name: cortex
  
  # Adding an ingress resource for Prometheus GUI
  ingress:
    enabled: true
    hosts:
      - prometheus.local.naim.run
    paths:
      - /
  
  prometheusSpec:
    # Remote Write all the scrapped data to Cortex side with specific header parameter
    remoteWrite:
      - url: http://cortex-distributor.cortex.svc:8080/api/prom/push
        headers:
          X-Scope-OrgID: internal-prometheus
    #    serviceMonitorSelector:
    #      matchLabels:
    #        release: kube-prometheus
    
    # Configure Persistent Volume for Prometheus storage
    storageSpec:
      volumeClaimTemplate:
        spec:
          resources:
            requests:
              storage: 5Gi
    
    # Adding a common custom label for all the scrapped metrics
    externalLabels:
      cluster: "prometheus-agent"